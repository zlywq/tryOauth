server:
  port: 10082
#  port: 8443
#  ssl:
#    key-alias: alias1
#    key-password: 123456
#    key-store: classpath:serverKeystore.jks
#    key-store-password: 123456
  tomcat:
    uri-encoding: UTF-8

myOauthServer:
  hostUrlWithoutPort: http://authsrv1
  #hostUrl: http://localhost
  hostUrl: ${myOauthServer.hostUrlWithoutPort}:10080
  #hostUrlBeforeProxy: http://win7base:10090
  hostUrlBeforeProxy: https://win7base:10095
  #logoutUrl: ${myOauthServer.hostUrl}/logreg/logout
  logoutUrl: ${myOauthServer.hostUrlBeforeProxy}/logreg/logout
  # directly to some1 oauth server /logout FAIL to logout
myOauthResServer:
  hostUrl: http://ressrv1:10081

security:
  oauth2:
    sso:
        loginPath: /logreg/login
    client:
      #clientId: acme
      #clientSecret: acmesecret
      clientId: client1
      clientSecret: client1secret
      accessTokenUri: ${myOauthServer.hostUrl}/oauth/token
      userAuthorizationUri: ${myOauthServer.hostUrlBeforeProxy}/oauth/authorize
      clientAuthenticationScheme: form
    resource:
      jwt:
          keyUri: ${myOauthServer.hostUrl}/oauth/token_key
      #user-info-uri: ${myOauthServer.hostUrl}/res1/me

## SECURITY OAUTH2 CLIENT (OAuth2ClientProperties)
#security.oauth2.client.client-id= # OAuth2 client id.
#security.oauth2.client.client-secret= # OAuth2 client secret. A random secret is generated by default
## SECURITY OAUTH2 SSO (OAuth2SsoProperties)
#security.oauth2.sso.filter-order= # Filter order to apply if not providing an explicit WebSecurityConfigurerAdapter
#security.oauth2.sso.login-path=/login # Path to the login page, i.e. the one that triggers the redirect to the OAuth2 Authorization Server
## SECURITY OAUTH2 RESOURCES (ResourceServerProperties)
#security.oauth2.resource.filter-order= # The order of the filter chain used to authenticate tokens.
#security.oauth2.resource.id= # Identifier of the resource.
#security.oauth2.resource.jwt.key-uri= # The URI of the JWT token. Can be set if the value is not available and the key is public.
#security.oauth2.resource.jwt.key-value= # The verification key of the JWT token. Can either be a symmetric secret or PEM-encoded RSA public key.
#security.oauth2.resource.jwk.key-set-uri= # The URI for getting the set of keys that can be used to validate the token.
#security.oauth2.resource.prefer-token-info=true # Use the token info, can be set to false to use the user info.
#security.oauth2.resource.service-id=resource #
#security.oauth2.resource.token-info-uri= # URI of the token decoding endpoint.
#security.oauth2.resource.token-type= # The token type to send when using the userInfoUri.
#security.oauth2.resource.user-info-uri= # URI of the user endpoint.
#28.3.1 Client
#security:
#    oauth2:
#        client:
#            clientId: bd1c0a783ccdd1c9b9e4
#            clientSecret: 1a9030fbca47a5b2c28e92f19050bb77824b5ad1
#            accessTokenUri: https://github.com/login/oauth/access_token
#            userAuthorizationUri: https://github.com/login/oauth/authorize
#            clientAuthenticationScheme: form

securityconfig:
  logouturl: /logout
  logoutsuccssurl: /signout2
  permitall: /tmp/**,/test**,/tmptest/**,/logreg/reg**

druid1:
  url: jdbc:mysql://win7base:3306/sprbtOauth1?useUnicode=true&characterEncoding=utf-8
  username: user1
  password: aaa
  driver-class: com.mysql.jdbc.Driver
  initial-size: 1
  min-idle: 1
  max-active: 20
  test-on-borrow: true

logging:
  level:
    org.springframework.security: DEBUG
    org.springframework.web: DEBUG
    sprssozdemo1: DEBUG
